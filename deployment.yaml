#0. Create a namespace for the project
apiVersion: v1
kind: Namespace
metadata:
  name: g3
---

# 1. Secrets for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: g3
type: Opaque
data:
  POSTGRES_USER: am9zaWFubmU=
  POSTGRES_PASSWORD: am9zaWFubmU=
  POSTGRES_DB: ZzNkYXRh

---
# 2. Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: g3
spec:
  clusterIP: None
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres


---
# 3. StatefulSet for PostgreSQL (2 replicas, each with its own PVC)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: g3
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
        - name: db-init
          image: postgres:16-alpine
          env:
            - name: PGPASSWORD
              value: POSTGRES_PASSWORD
          command: [ 'sh', '-c', 'psql -h REDIS_HOST -U POSTGRES_USER -d POSTGRES_DB -f ./sql/insert.sql' ]
          volumeMounts:
            - name: db-init-script
              mountPath: /sql/insert.sql
              subPath: /sql/insert.sql

      volumes:
        - name: db-init-script
          configMap:
            name: db-init-sql
            name: db-init-sql
      containers:
        - name: postgres
          image: postgres:latest
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: POSTGRES_DB
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: pgdata
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: g3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7
          ports:
            - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: g3
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis

---
# 4. Backend (API server) Deployment (with HA)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: cessouille/g3-dragonvale-backend:1.1.4
          env:
            - name: DATABASE_URL
              value: "postgresql://josianne:josianne@postgres:5432/g3data?schema=public"
            - name: PORT
              value: "3000"
            - name: FRONT_URL
              value: "https://g3-frontend.local"
            - name: REDIS_HOST
              value: "redis"
          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: g3
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: backend

---
# 5. Frontend (client + IHM) Deployment (with HA)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: g3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: cessouille/g3-dragonvale-frontend:1.1.5
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: g3
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30888
  selector:
    app: frontend

---
# Ingress for frontend (no rewrite)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  namespace: g3
spec:
  tls:
    - hosts:
        - g3-frontend.local
      secretName: g3-frontend-tls
  rules:
    - host: g3-frontend.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 3000
    - host: localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 3000

---
# 7. NetworkPolicies to restrict access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: network-frontend-to-backend
  namespace: g3
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: frontend
      ports:
        - protocol: TCP
          port: 3000

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: network-backend-to-db
  namespace: g3
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend
      ports:
        - protocol: TCP
          port: 5432
